import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class MapFrame extends javax.swing.JFrame {

    private URL url;
    private ImageIcon icon;
    private String source;
    private String destination;
    private ArrayList<String> waypoints;
    private double lat;
    private double lon;
    private int zoom;
    private double[][] pollutionMatrix;
    private Image image;
    private ArrayList<Route> routeList;
    private final double minLat = 44.365097;
    private final double maxLat = 44.523937;
    private final double minLon = 25.937004;
    private final double maxLon = 26.249818;
    private final double lonRatio = (maxLon - minLon) / 6;
    private final double latRatio = (maxLat - minLat) / 6;

    /**
     * Creates new form NewJFrame
     *
     * @param source
     * @param destination
     * @param waypoints
     */
    public MapFrame(String source, String destination, ArrayList<String> waypoints) {
        routeList = new ArrayList<>();

        initComponents();
        this.source = source;
        this.destination = destination;
        this.waypoints = waypoints;
        createMap();
        try {
            this.pollutionMatrix = createMatrix();
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        addPolutionOverlay();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(760, 760));
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private double[][] createMatrix() throws IOException {

        double[][] matrix = new double[31][31];
        double[][] finMatrix = new double[31][31];
        URL resource = null;
        BufferedReader in = null;
        StringBuilder response;
        
        for (int i = 0; i < 31; i += 5) {
            
            double latCoord = minLat + i / 5 * latRatio;
            
            for (int j = 0; j < 31; j += 5) {
                
                double lonCoord = minLon + j / 5 * lonRatio;
                
                try {
                    resource = new URL ("https://api.breezometer.com/baqi/?lat="+ latCoord + "&lon=" + lonCoord + "&key=821db3619dc348728b226a330ccf220e ");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                HttpURLConnection conBreeze = null;
                try {
                    conBreeze = (HttpURLConnection) resource.openConnection();
                } catch (IOException ex) {
                    Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    conBreeze.setRequestMethod("GET");
                } catch (ProtocolException ex) {
                    Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            
                try {
                    in = new BufferedReader(new InputStreamReader(conBreeze.getInputStream()));
                } catch (IOException ex) {
                    Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                response = new StringBuilder();
                String inputLine;
                try {
                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                in.close();
            
                String[] tokensB = new String[3];
                tokensB = response.toString().split("\"breezometer_aqi\":");
                String quality = tokensB[1].split(",")[0].replaceAll("\\s", "");
                
                matrix[i][j] = Integer.parseInt(quality);
            }
        }

        for (int i = 0; i < 26; i += 5) {
            for (int j = 0; j < 26; j += 5) {
                for (int k = 1; k < 5; k++) {
                    for (int l = 1; l < 5; l++) {
                        matrix[i + k][j + l] = matrix[i][j] * (5 - k) * (5 - l) / 25 +
                                                matrix[i + 5][j] * l * (5 - k) / 25 +
                                                matrix[i][j + 5] * (5 - l) * k / 25 + 
                                                matrix[i + 5][j + 5] * (k * l) / 25;
                    }
                    
                    matrix[i + k][j] = matrix[i][j] * (5 - k) / 5 + matrix[i + 5][j] * k / 5;
                    matrix[i][j + k] = matrix[i][j] * (5 - k) / 5 + matrix[i][j + 5] * k / 5;
                }
            } 
        }
        for (int i = 0; i < 26; i += 5) {
            for (int l = 1; l < 5; l++) {
                matrix[30][i + l] = matrix[30][i] * (5 - l) / 5 + matrix[30][i + 5] * l / 5;
                matrix[i + l][30] = matrix[i][30] * (5 - l) / 5 + matrix[i + 5][30] * l / 5;
            }
        }
        
        for (int i = 0; i < 31; i++) {
            finMatrix[i] = matrix[30 - i];
        }

        return finMatrix;
    }
    private String[] getCoord(String location) throws IOException {
        
        String transf = location.replace(" ", "+");
        URL url1 = null;
        
        try { 
            url1 = new URL("https://maps.googleapis.com/maps/api/geocode/json" +
                    "?address=" + transf + "&key=AIzaSyDQKLqlmunVm8LGlZIiGsDlFZGcMgJ_4wI");
        } catch (MalformedURLException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        HttpURLConnection con = null;
        try {
            con = (HttpURLConnection) url1.openConnection();
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            con.setRequestMethod("GET");
        } catch (ProtocolException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String inputLine; 
        StringBuilder response = new StringBuilder();

        try {
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (in != null) {
            in.close();
        }
        
        String[] tokens = new String[3];
        tokens = response.toString().split("location");
        String locLat, locLon;
        try {
            String[] tokens2 = tokens[1].split(":");
            locLat = tokens2[2].split(",")[0].replaceAll("\\s", "");
            locLon = tokens2[3].split("}")[0].replaceAll("\\s", "");
            
            return new String[] {locLat, locLon};
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "Invalid location(s)");
        }
        
        return null;
    }
    
    private void createMap() {
        
        String[] sourceCoord = null, destCoord = null;
        ArrayList<String[]> waypointsCoord = new ArrayList<String[]>();
        
        try {
            sourceCoord = getCoord(source);
            destCoord = getCoord(destination);
            
            for (String s : waypoints) {
                waypointsCoord.add(getCoord(s)); 
            }
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String markers;
        int no;
        double maxLat = Double.MIN_VALUE;
        double maxLon = Double.MIN_VALUE;
        double minLat = Double.MAX_VALUE;
        double minLon = Double.MAX_VALUE;
        
        if (sourceCoord != null && destCoord != null) {
            markers = "&markers=color:red%7Clabel:S%7C" + sourceCoord[0] + "," + sourceCoord[1] + 
                        "&markers=color:red%7Clabel:D%7C" + destCoord[0] + "," + destCoord[1];
            
            lat = Double.parseDouble(sourceCoord[0]) + Double.parseDouble(destCoord[0]);
            lon = Double.parseDouble(sourceCoord[1]) + Double.parseDouble(destCoord[1]);
            no = 2;
            
            if (maxLat < Double.parseDouble(sourceCoord[0])) {
                maxLat = Double.parseDouble(sourceCoord[0]);
            }
            
            if (maxLon < Double.parseDouble(sourceCoord[1])) {
                maxLon = Double.parseDouble(sourceCoord[1]);
            }
                        
            if (maxLat < Double.parseDouble(destCoord[0])) {
                maxLat = Double.parseDouble(destCoord[0]);
            }
                                    
            if (maxLon < Double.parseDouble(destCoord[1])) {
                maxLon = Double.parseDouble(destCoord[1]);
            }
            
            if (minLat > Double.parseDouble(sourceCoord[0])) {
                minLat = Double.parseDouble(sourceCoord[0]);
            }
            
            if (minLon > Double.parseDouble(sourceCoord[1])) {
                minLon = Double.parseDouble(sourceCoord[1]);
            }
                        
            if (minLat > Double.parseDouble(destCoord[0])) {
                minLat = Double.parseDouble(destCoord[0]);
            }
                                    
            if (minLon > Double.parseDouble(destCoord[1])) {
                minLon = Double.parseDouble(destCoord[1]);
            }
            
            for (int i = 0; i < waypointsCoord.size(); i++) {
                markers += "&markers=color:red%7Clabel:W%7C" + waypointsCoord.get(i)[0] + "," + waypointsCoord.get(i)[1];
                lat += Double.parseDouble(waypointsCoord.get(i)[0]);
                lon += Double.parseDouble(waypointsCoord.get(i)[1]);
                no++;
                
                if (maxLat < Double.parseDouble(waypointsCoord.get(i)[0])) {
                    maxLat = Double.parseDouble(waypointsCoord.get(i)[0]);
                }

                if (maxLon < Double.parseDouble(waypointsCoord.get(i)[1])) {
                    maxLon = Double.parseDouble(waypointsCoord.get(i)[1]);
                }

                if (minLat > Double.parseDouble(waypointsCoord.get(i)[0])) {
                    minLat = Double.parseDouble(waypointsCoord.get(i)[0]);
                }

                if (minLon > Double.parseDouble(waypointsCoord.get(i)[1])) {
                    minLon = Double.parseDouble(waypointsCoord.get(i)[1]);
                }
            }

            lat /= no;
            lon /= no;
            
            
            if (maxLat - minLat >= 0.05 || maxLon - minLon >= 0.05) {
                zoom = 12;
            }
            else if (maxLat - minLat >= 0.01 || maxLon - minLon >= 0.01) {
                zoom = 13;
            }
            else {
                zoom = 14;
            }

            //Compute Route
            this.getAllRoutes();
            //String polyline = getRoute();
            String polyline = routeList.get(0).getOverview_polyline();

            
            try {
                url = new URL("https://maps.googleapis.com/maps/api/staticmap?"
                        + "center=" + lat + "," + lon + "&"
                        + "size=700x700&maptype=roadmap&"
                        + "path=enc:"+polyline
                        + "&zoom=" + zoom + "&" + markers
                        + "&key=AIzaSyBPdzxz3LQzNkM5u3Fcn-4wvdxOWFEDK9g");
            } catch (MalformedURLException ex) {
                Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                image = ImageIO.read(url);
            } catch (IOException ex) {
                Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            icon = new ImageIcon(image);
            jLabel1.setIcon(icon);

        }
    }


    private void addPolutionOverlay(){
        BufferedImage img = new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_ARGB);

        Graphics2D bGr = img.createGraphics();
        bGr.drawImage(image, 0, 0, null);

        //Get polution Min and Max
        double minP,maxP,midP;
        minP= pollutionMatrix[0][0];
        maxP = pollutionMatrix[0][0];


        for(int i=0; i<pollutionMatrix.length;i++)
            for(int j = 0; j<pollutionMatrix[i].length;j++) {
                if (pollutionMatrix[i][j] > maxP)
                    maxP = pollutionMatrix[i][j];
                else if (pollutionMatrix[i][j] < minP)
                    minP = pollutionMatrix[i][j];
            }
        midP =  minP + (maxP - minP) / 2;

        int boxHeight,boxWitdh;
        boxHeight = 1 + image.getHeight(null) / pollutionMatrix.length;
        boxWitdh = 1 + image.getWidth(null) / pollutionMatrix[0].length;

        for(int i=0; i < pollutionMatrix.length; i++) {
            for (int j = 0; j < pollutionMatrix[i].length; j++) {
                Color pointColor;
                double percentage;
                //Compute Color
                if (pollutionMatrix[i][j] <= midP) {
                    percentage = (pollutionMatrix[i][j] - minP) / (midP - minP);
                    pointColor = new Color(255, (int) (255 * percentage), 0, 60);
                } else {
                    percentage = (pollutionMatrix[i][j] - midP) / (maxP - midP);
                    pointColor = new Color((int) (255 * percentage), 255, 0, 60);
                }

                bGr.setColor(pointColor);
                bGr.fillRect(i * boxWitdh, j * boxHeight, boxWitdh, boxHeight);
            }
        }

        bGr.dispose();
        jLabel1.setIcon(new ImageIcon(img));
    }

    private String getRoute() {

        URL resource = null;
        BufferedReader in = null;

        //Get Directions
        try {
            resource = new URL("https://maps.googleapis.com/maps/api/directions/json?"
                    + "origin=" + source.replaceAll(" ", "+")
                    + "&destination=" + destination.replaceAll(" ", "+")
                    + "&key=AIzaSyDBmJStlugUg1zhRvaVIKYdDNGYjeE0yDE ");
        } catch (MalformedURLException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        HttpURLConnection googleDirections = null;
        try {
            googleDirections = (HttpURLConnection) resource.openConnection();
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            googleDirections.setRequestMethod("GET");
        } catch (ProtocolException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            in = new BufferedReader(new InputStreamReader(googleDirections.getInputStream()));
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String inputLine;
        StringBuilder response = new StringBuilder();

        try {
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String result = response.substring(response.indexOf("overview_polyline"));
        result = result.substring(result.indexOf("{"));
        result = result.substring(result.indexOf(":"));
        result = result.substring(result.indexOf('"') + 1 );
        result = result.substring(0,result.indexOf('"'));
        result= result.replace("\\\\", "\\");

        return result;
    }

    void getAllRoutes(){
        URL resource = null;
        BufferedReader in = null;

        //Get Directions
        try {
            resource = new URL("https://maps.googleapis.com/maps/api/directions/json?"
                    + "origin=" + source.replaceAll(" ", "+")
                    + "&destination=" + destination.replaceAll(" ", "+")
                    + "&alternatives=true"
                    + "&key=AIzaSyDBmJStlugUg1zhRvaVIKYdDNGYjeE0yDE ");
        } catch (MalformedURLException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        HttpURLConnection googleDirections = null;
        try {
            googleDirections = (HttpURLConnection) resource.openConnection();
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            googleDirections.setRequestMethod("GET");
        } catch (ProtocolException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            in = new BufferedReader(new InputStreamReader(googleDirections.getInputStream()));
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String inputLine;
        StringBuilder response = new StringBuilder();

        try {
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            JSONObject jsonObj = new JSONObject(response.toString());
            JSONArray routes = jsonObj.getJSONArray("routes");

            for(int i=0;i<routes.length();i++){
                JSONObject buffer = routes.getJSONObject(i);

                int time = buffer.getJSONArray("legs").getJSONObject(0).getJSONObject("duration").getInt("value");
                String polyline = buffer.getJSONObject("overview_polyline").getString("points");

                Route routeBuffer = new Route(polyline,i,time);

                JSONArray steps = buffer.getJSONArray("legs").getJSONObject(0).getJSONArray("steps");
                for(int j=0; j<steps.length();j++){
                    Step stepBuffer;
                    JSONObject startLocation = steps.getJSONObject(i).getJSONObject("start_location");
                    JSONObject endLocation = steps.getJSONObject(i).getJSONObject("end_location");
                    JSONObject distance = steps.getJSONObject(i).getJSONObject("distance");
                    JSONObject duration = steps.getJSONObject(i).getJSONObject("duration");


                    stepBuffer = StepBuilder.create().
                            withStartLocation(startLocation.getDouble("lat"),startLocation.getDouble("lng")).
                            withEndLocation(endLocation.getDouble("lat"),endLocation.getDouble("lng")).
                            withDistance(distance.getDouble("value")).
                            withTime(duration.getDouble("value")).
                            build();
                    routeBuffer.addStep(stepBuffer);
                }
                routeList.add(routeBuffer);
            }

        }catch (JSONException e){
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
