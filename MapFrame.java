import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class MapFrame extends javax.swing.JFrame {

    private URL url;
    private ImageIcon icon;
    private String source;
    private String destination;
    private ArrayList<String> waypoints;
    double lat;
    double lon;
    int zoom;

    /**
     * Creates new form NewJFrame
     *
     * @param source
     * @param destination
     * @param waypoints
     */
    public MapFrame(String source, String destination, ArrayList<String> waypoints) {
        initComponents();
        this.source = source;
        this.destination = destination;
        this.waypoints = waypoints;
        createMap();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(760, 760));
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String[] getCoord(String location) throws IOException {
        
        String transf = location.replace(" ", "+");
        URL url1 = null;
        
        try { 
            url1 = new URL("https://maps.googleapis.com/maps/api/geocode/json" +
                    "?address=" + transf + "&key=AIzaSyDQKLqlmunVm8LGlZIiGsDlFZGcMgJ_4wI");
        } catch (MalformedURLException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        HttpURLConnection con = null;
        try {
            con = (HttpURLConnection) url1.openConnection();
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            con.setRequestMethod("GET");
        } catch (ProtocolException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String inputLine; 
        StringBuilder response = new StringBuilder();

        try {
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (in != null) {
            in.close();
        }
        
        String[] tokens = new String[3];
        tokens = response.toString().split("location");
        String locLat, locLon;
        try {
            String[] tokens2 = tokens[1].split(":");
            locLat = tokens2[2].split(",")[0].replaceAll("\\s", "");
            locLon = tokens2[3].split("}")[0].replaceAll("\\s", "");
            
            return new String[] {locLat, locLon};
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "Invalid location(s)");
        }
        
        return null;
    }
    
    private void createMap() {
        
        String[] sourceCoord = null, destCoord = null;
        ArrayList<String[]> waypointsCoord = new ArrayList<String[]>();
        
        try {
            sourceCoord = getCoord(source);
            destCoord = getCoord(destination);
            
            for (String s : waypoints) {
                waypointsCoord.add(getCoord(s)); 
            }
        } catch (IOException ex) {
            Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String markers;
        int no;
        double maxLat = Double.MIN_VALUE;
        double maxLon = Double.MIN_VALUE;
        double minLat = Double.MAX_VALUE;
        double minLon = Double.MAX_VALUE;
        
        if (sourceCoord != null && destCoord != null) {
            markers = "&markers=color:red%7Clabel:S%7C" + sourceCoord[0] + "," + sourceCoord[1] + 
                        "&markers=color:red%7Clabel:D%7C" + destCoord[0] + "," + destCoord[1];
            
            lat = Double.parseDouble(sourceCoord[0]) + Double.parseDouble(destCoord[0]);
            lon = Double.parseDouble(sourceCoord[1]) + Double.parseDouble(destCoord[1]);
            no = 2;
            
            if (maxLat < Double.parseDouble(sourceCoord[0])) {
                maxLat = Double.parseDouble(sourceCoord[0]);
            }
            
            if (maxLon < Double.parseDouble(sourceCoord[1])) {
                maxLon = Double.parseDouble(sourceCoord[1]);
            }
                        
            if (maxLat < Double.parseDouble(destCoord[0])) {
                maxLat = Double.parseDouble(destCoord[0]);
            }
                                    
            if (maxLon < Double.parseDouble(destCoord[1])) {
                maxLon = Double.parseDouble(destCoord[1]);
            }
            
            if (minLat > Double.parseDouble(sourceCoord[0])) {
                minLat = Double.parseDouble(sourceCoord[0]);
            }
            
            if (minLon > Double.parseDouble(sourceCoord[1])) {
                minLon = Double.parseDouble(sourceCoord[1]);
            }
                        
            if (minLat > Double.parseDouble(destCoord[0])) {
                minLat = Double.parseDouble(destCoord[0]);
            }
                                    
            if (minLon > Double.parseDouble(destCoord[1])) {
                minLon = Double.parseDouble(destCoord[1]);
            }
            
            for (int i = 0; i < waypointsCoord.size(); i++) {
                markers += "&markers=color:red%7Clabel:W%7C" + waypointsCoord.get(i)[0] + "," + waypointsCoord.get(i)[1];
                lat += Double.parseDouble(waypointsCoord.get(i)[0]);
                lon += Double.parseDouble(waypointsCoord.get(i)[1]);
                no++;
                
                if (maxLat < Double.parseDouble(waypointsCoord.get(i)[0])) {
                    maxLat = Double.parseDouble(waypointsCoord.get(i)[0]);
                }

                if (maxLon < Double.parseDouble(waypointsCoord.get(i)[1])) {
                    maxLon = Double.parseDouble(waypointsCoord.get(i)[1]);
                }

                if (minLat > Double.parseDouble(waypointsCoord.get(i)[0])) {
                    minLat = Double.parseDouble(waypointsCoord.get(i)[0]);
                }

                if (minLon > Double.parseDouble(waypointsCoord.get(i)[1])) {
                    minLon = Double.parseDouble(waypointsCoord.get(i)[1]);
                }
            }

            lat /= no;
            lon /= no;
            
            
            if (maxLat - minLat >= 0.05 || maxLon - minLon >= 0.05) {
                zoom = 12;
            }
            else if (maxLat - minLat >= 0.01 || maxLon - minLon >= 0.01) {
                zoom = 13;
            }
            else {
                zoom = 14;
            }
            System.out.println(maxLat + " " + minLat + " " + maxLon + " " + minLon + " " + zoom);
            try {
                url = new URL("https://maps.googleapis.com/maps/api/staticmap?"
                        + "center=" + lat + "," + lon + "&"
                        + "size=700x700&maptype=roadmap&"
                        + "zoom=" + zoom + "&" + markers
                        + "&key=AIzaSyBPdzxz3LQzNkM5u3Fcn-4wvdxOWFEDK9g");
            } catch (MalformedURLException ex) {
                Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                icon = new ImageIcon(ImageIO.read(url));
            } catch (IOException ex) {
                Logger.getLogger(MapFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel1.setIcon(icon);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
